use crate::{
    tokens::{Token, LexicalError},
    ast::{Expression, ExpressionKind, Statement, StatementKind, Location, Operator},
    reporting::Message,
};

grammar<'input>();

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "var" => Token::KeywordVar,
        "print" => Token::KeywordPrint,
        "identifier" => Token::Identifier(<&'input str>),
        "int" => Token::Integer(<&'input str>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=" => Token::Assign,
        ";" => Token::Semicolon,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
    }
}

pub Script: Vec<Statement<'input>> = {
    <Statement*>,
}

WithLoc<Rule, Output>: Output = <start: @L> <rule: Rule> <end: @R> => rule.with_loc(Location(start, end));

Statement: Statement<'input> = WithLoc<StatementKind, Statement>;

StatementKind: StatementKind<'input> = {
    "var" <name:"identifier"> "=" <value:Expression> ";" => StatementKind::Variable { <> },
    "print" <value:Expression> ";" => StatementKind::Print { <> },
    <start: @L> <error: !> <end: @R> ";" => StatementKind::Error(Message::from_lalrpop(error.error, Some(Location(start, end)))),
}


Expression: Box<Expression<'input>> = {
    #[precedence(level="1")]
    <Term>,

    #[precedence(level="2")]
    #[assoc(side="left")]
    <start: @L> <lhs: Expression> <operator: MulDiv> <rhs: Expression> <end: @R> => ExpressionKind::BinaryOperation { lhs, operator, rhs }.with_loc(Location(start, end)),

    #[precedence(level="3")]
    #[assoc(side="left")]
    <start: @L> <lhs: Expression> <operator: AddSub> <rhs: Expression> <end: @R> => ExpressionKind::BinaryOperation { lhs, operator, rhs }.with_loc(Location(start, end)),
}

MulDiv: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
};

AddSub: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
};

Term: Box<Expression<'input>> = {
    "(" <Expression> ")",
    <start: @L> <n: Num> <end: @R> => n.with_loc(Location(start, end)),
    <start: @L> <ident: "identifier"> <end: @R> => ExpressionKind::Variable(ident).with_loc(Location(start, end)),
    <start: @L> <err: !> <end: @R> => ExpressionKind::Error(Message::from_lalrpop(err.error, Some(Location(start, end)))).with_loc(Location(start, end)),
}

Num: ExpressionKind<'input> =
    <start: @L> <value: "int"> <end: @R> => match value.parse::<i64>() {
        Ok(value) => ExpressionKind::Integer(value),
        Err(e) => ExpressionKind::Error(Message::lexer_error(LexicalError::from(e).into(), Location(start, end))),
    };